name: Feature Request
description: Suggest a new feature or improvement
title: "[Feature]: "
labels: ["enhancement"]
assignees: []

body:
  - type: markdown
    attributes:
      value: |
        Thank you for suggesting a feature! Please provide comprehensive information to help us evaluate and implement it.

  - type: textarea
    id: summary
    attributes:
      label: Summary
      description: A concise description of the feature in 1-2 sentences.
      placeholder: Add support for save states to allow users to save and restore emulator state at any point.
    validations:
      required: true

  - type: textarea
    id: motivation
    attributes:
      label: Motivation
      description: Why is this feature needed? What problem does it solve? What value does it provide?
      placeholder: |
        Currently, users cannot save their progress during gameplay. This makes it difficult to:
        - Debug specific game states
        - Test specific scenarios without replaying entire sections
        - Create reproducible test cases for bug reports

        Save states would significantly improve developer workflow and user experience.
    validations:
      required: true

  - type: textarea
    id: detailed_description
    attributes:
      label: Detailed Description
      description: Provide a comprehensive explanation of the feature, including behavior, functionality, and edge cases.
      placeholder: |
        The save state feature should:
        1. Capture complete emulator state (CPU registers, RAM, VRAM, etc.)
        2. Support multiple save slots (at least 10)
        3. Include metadata (timestamp, game name, screenshot)
        4. Provide hotkey support (F5 to save, F9 to load)
        5. Validate state integrity before loading

        Edge cases to handle:
        - What happens if save state is from different ROM?
        - How to handle version incompatibility?
        - Memory limits for save state files
    validations:
      required: true

  - type: textarea
    id: proposed_solution
    attributes:
      label: Proposed Solution
      description: How do you envision this being implemented? Include technical details if possible.
      placeholder: |
        1. Create a new `SaveState` struct in `src/state.zig`
        2. Implement serialization for all emulator components:
           - CPU state (registers, flags)
           - Memory (RAM, VRAM, expansion regions)
           - GPU state (registers, mode, timing)
           - Audio state (current samples, playback position)
        3. Add file I/O functions to save/load binary snapshots
        4. Implement hotkey handlers in the main loop
        5. Create UI for save state management (list, delete, rename)

  - type: textarea
    id: alternatives
    attributes:
      label: Alternative Solutions
      description: What other approaches have you considered? What are their pros and cons?
      placeholder: |
        Alternative 1: Only save RAM state
        - Pro: Simpler implementation, smaller files
        - Con: Incomplete restoration, may cause issues with peripherals

        Alternative 2: Use existing format (like GSZ)
        - Pro: Compatibility with other emulators
        - Con: May not capture all psrx specific state

        Alternative 3: Implement replay recording instead
        - Pro: Smaller file size, deterministic
        - Con: Slower to load, requires perfect determinism

  - type: textarea
    id: tradeoffs
    attributes:
      label: Trade-offs
      description: What are the potential downsides or costs of this feature?
      placeholder: |
        - File size: Each save state could be 2-8MB depending on game state
        - Complexity: Adds significant code for serialization/deserialization
        - Maintenance: Version changes may break old save states
        - Performance: Saving state may cause frame drops (need to optimize)
        - Testing: Requires extensive testing across many games

  - type: textarea
    id: success_criteria
    attributes:
      label: Success Criteria
      description: How will we know this feature is successfully implemented? What should it achieve?
      placeholder: |
        The feature is successful when:
        - [ ] Can save and restore state with 100% accuracy
        - [ ] Save/load operations complete in <100ms
        - [ ] Supports at least 10 save slots per game
        - [ ] Save states work across emulator restarts
        - [ ] Clear error messages for incompatible states
        - [ ] File size per save state is <5MB
        - [ ] Unit tests cover serialization of all components
        - [ ] Documentation includes save state format specification

  - type: textarea
    id: examples
    attributes:
      label: Examples / References
      description: Are there examples from other projects or references that demonstrate this feature?
      placeholder: |
        - RetroArch: Comprehensive save state system with thumbnails
        - VisualBoyAdvance: Simple save state implementation
        - PCSX2: Advanced save state with compression
        - Reference: https://github.com/libretro/RetroArch/blob/master/state_manager.c

  - type: dropdown
    id: priority
    attributes:
      label: Priority
      description: How important is this feature to you?
      options:
        - Low - Nice to have
        - Medium - Would improve workflow
        - High - Critical for my use case
      default: 0
    validations:
      required: true

  - type: dropdown
    id: complexity
    attributes:
      label: Estimated Complexity
      description: How complex do you think this feature is to implement?
      options:
        - Low - Simple change
        - Medium - Moderate effort
        - High - Significant undertaking
        - Unknown
      default: 3

  - type: checkboxes
    id: contribution
    attributes:
      label: Contribution
      options:
        - label: I am willing to help implement this feature
          required: false
        - label: I can provide test cases or examples
          required: false
        - label: I can help with documentation
          required: false

  - type: checkboxes
    id: checklist
    attributes:
      label: Pre-submission Checklist
      description: Please confirm the following before submitting.
      options:
        - label: I have searched existing issues to ensure this is not a duplicate
          required: true
        - label: I have provided detailed information above
          required: true
        - label: This feature aligns with the project's goals
          required: false